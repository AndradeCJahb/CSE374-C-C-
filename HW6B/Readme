  Christopher Andrade
  GitLab repository url: https://gitlab.cs.washington.edu/cse374-23au-students/cse374-23au-andradec/-/tree/main
  12/13/2023
  bench.c

  The getmem.c file implements getmem() which returns a pointer to an allocated chunk of memory. The freelist data
  structure is essentially a linked list with nodes which describe the memory they have allocated and a pointer to
  the next free chunk of memory. Upon being allocated a chunk of memory is "pointed" over, essentially removed from
  the list of free memory. The freemem.c file implements a freemem() which is analogous to the free() function by
  adding removed chunks back into the freelist. Furthermore, after each addition to freelist the list is checked for
  free memory chunks which are adjacent, which are then combined.

  I found that in allocating memory there were three main scenarios.
  1. No sufficient free memory is available, and the size requested is larger than the default large chunk size.
  2. No sufficient free memory is available, and the size requested is smaller than default large chunk size.
  3. sufficient memory is available
  Scenarios 2 and 3 must also account for the case that there is too much free memory in a chunk and therefore a
  chunk must be split. I originally created multiple if and else statements which all returned at seperate times,
  however I was able to consolidate the code into a single if/else (with its own sub-if/elses) which returned at a
  single statement at the end of the function.

  Statistics such as number of free blocks, their respective average size and time to execute were very similar to
  the statistics observed from the files given in HW6A. Though the one statistic which was significantly different
  was the total storage statistic which in HW6A was in the range of 100-500k bytes while it exceeded a million bytes
  in my own implementation of getmem.c and freemem.c.

  The lecture 23 slide notes were very helpful in implementing code which combines multiple adjacent,
  free memory blocks into a single block, slide-deck was also useful in clarifying uintptr_t.