#!/bin/bash
#
# Author: Christopher Andrade
# UWNetID: andradec
# CSE 374 Homework 3
# 11/7/23
#
# tninetest uses multiple checks to ensure the t9 script/executable works correctly. The executable is
# ensured to be able to access/handle both real and non-existant dictionaries. Furthermore the
# executable can also be given multiple testfiles which also ensure the executable is working
# correctly. 

# ensures that there are at least 3 arguments in commandline, exits with code 1 if not.
if [ $# -lt 3 ]; then
    echo "Usage: tninetest OUTPUT EXECUTABLE TESTFILE..." >&2
    exit 1
fi

out="$1"
exec="$2"
shift 2

# checks if executable exists, exits with code 1 if not.
if ! [ -e "$exec" ]; then
    echo "$exec does not exist or is not executable." >&2
    exit 1
fi

# checks if output file exists, clears it if so.
if [ -e "$out" ]; then
	echo "Replacing $out" 
	rm "$out"
fi

export PATH="$PATH:./"
echo "Testing $exec" >> "$out"
date >> "$out"

# checks if executable fails when given no arguments.
if ! ./"$exec" >/dev/null 2>&1; then
    echo "Test Usability ... SUCCESS" >> "$out"
else
    echo "Test Usability ... FAILURE" >> "$out"
fi

# checks if executable can handle bad/non-existant dictionary.
if ! ./"$exec" notReal.txt >/dev/null 2>&1; then
    echo "Test Handle Bad Dictionary ... SUCCESS" >> "$out"
else
    echo "Test Handle Bad Dictionary ... FAILURE" >> "$out"
fi

# checks if executable can handle real dictionary.
if ./"$exec" smallDictionary.txt <<< $'exit' >/dev/null; then
    echo "Test Load Dictionary ... SUCCESS" >> "$out"
else
    echo "Test Load Dictionary ... FAILURE" >> "$out"
fi

# checks if executable can handle input correctly, when given code for a specific expected word.
if ./"$exec" smallDictionary.txt << INPUT | grep -q "Your word is: jello"
53556
exit
INPUT
then
    echo "Test Find Word ... SUCCESS" >> "$out"
else
    echo "Test Find Word ... FAILURE" >> "$out"
fi

# loops through the remaining arguments (test files) to ensure that they can be handled
# by the executable correctly. If testfiles do not exist locally there will be an attempt to
# download from a remote source and test them. If a file is successfully downloaded the file will
# be deleted locally after being tested.
for test in "$@"; do
    if [ ! -e "$test" ]; then
        if ! wget "https://courses.cs.washington.edu/courses/cse374/23au/assignments/$test" -O "$test" 2>/dev/null; then
            echo "Skipping $test" >> "$out"
            continue
        fi
    fi
    echo "Testing $test" >> "$out"

    if cat "$test" | ./"$exec" smallDictionary.txt <<< $'exit' >/dev/null; then
        echo "Test $test ... SUCCESS" >> "$out"
    else
        echo "Test $test ... FAILURE" >> "$out"
    fi

    if [ -e "$test" ] && [ -n "$(command -v wget)" ]; then
        rm "$test"
    fi
done

exit 0
